# -*- coding: utf-8 -*-
"""train_model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ZnXqVFYI1wA_AMESFamu0WlF7In8tVAA
"""

from sklearn.datasets import load_breast_cancer
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
import pandas as pd
import numpy as np
import joblib

# Load and prepare data
data = load_breast_cancer()
df = pd.DataFrame(data.data, columns=data.feature_names)
df["target"] = data.target

# Select 5 features
selected_features = ["mean radius", "mean texture", "mean perimeter", "mean area", "mean smoothness"]
X = df[selected_features]
y = df["target"]

# Scale and train
scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
model = LogisticRegression(max_iter=1000, C=0.1)
model.fit(X_scaled, y)

# Save model and scaler
joblib.dump(model, "model.pkl")
joblib.dump(scaler, "scaler.pkl")
from google.colab import files
files.download("model.pkl")
files.download("scaler.pkl")

"""
# Test prediction
# üß™ Sample input
sample_dict = {
  "mean radius": [14],
  "mean texture": [20],
  "mean perimeter": [100],
  "mean area": [1000],
  "mean smoothness": [0.10]
}

sample_df = pd.DataFrame(sample_dict)

# ‚úÖ Scale the input
scaled_input = scaler.transform(sample_df)

# üîç Predict and get both class probabilities
prediction = model.predict(scaled_input)[0]
probs = model.predict_proba(scaled_input)[0]

# üñ®Ô∏è Print results
print("Prediction:", "Benign" if prediction == 1 else "Malignant")
print("Confidence (Benign):", round(probs[1], 2))
print("Confidence (Malignant):", round(probs[0], 2))
"""

